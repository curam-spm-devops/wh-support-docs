TICKET,APAR,SUMMARY,COMPONENT,SUBCOMPONENT1,SUBCOMPONENT2,SUBCOMPONENT3,RELEASE_NOTE
SPM-139459,"   DT037089",REST API error messages return HTML code for a single quote (&#39) instead of the single quote character,CEF,Application Development Environment,Rest,,"*Issue Description:*
Certain REST API error messages contain parts which are subjected to HTML escaping, causing characters to be converted to their unreadable HTML-escaped representation.

*User Interface Impact:* No
*Steps to Repo:* N/A

Issue:?There was an issue while parsing a 'concern_role_id' attribute, which contains a value of '12345xxx': The field (&#39)concern_role_id(&#39) must be a whole number.

*Resolution:*
The REST infrastructure has been updated to ensure that error messages are displayed correctly for consumers of the API.


Resolved line should resemble this example.?There was an issue while parsing a 'concern_role_id' attribute, which contains a value of '12345xxx': The field 'concern_role_id' must be a whole number.

"
SPM-139458,DT037104,"The swagger spec generator in the REST infrastructure incorrectly always assumes the same request and responses body for a PUT request ",,,,,"*Issue Description:*
The Swagger spec generator in the REST infrastructure incorrectly assumes that all PUT requests have the same request and response body. This results in the object definition for the request body being reused for the response body, regardless of whether the input and output structs are different in the actual API.

*User Interface Impact:* No

*Steps to Reproduce:*

# Open the Swagger specification.
# Expand a PUT API with differing input and output structs.
# View the definitions section for the request and response bodies. 
# Issue: The Swagger spec generator reuses the request body object for the response body, even if the API has different input and output structs.

*Resolution:*
The Swagger spec generator has been updated to detect when a PUT API has differing input and output structs and generate separate object definitions for the request and response bodies when required.

"
SPM-139457,DT037091,"The Swagger specification for the REST apis is missing the description for the mandatory referer request header ",CEF,Application Development Environment,,,"*Issue Description:*
The Swagger specification for REST APIs does not include descriptions for the mandatory Referer header, which is required for all API requests.

*User Interface Impact:* No

*Steps to Reproduce:*

# Open the Swagger specification. 
# Expand the details for any GET, PUT, POST, or DELETE API request.
# Issue: The Referer header is not listed in the Parameters section, even though it is mandatory for all API requests.

*Resolution:*

The Swagger specification has been updated to include the Referer header as a mandatory parameter with an appropriate description for all API requests.

{noformat}{
          """"name"""": """"Referer"""",
          """"in"""": """"header"""",
          """"description"""": """"The Referer header is mandatory for all API requests."""",
          """"type"""": """"string"""",
          """"required"""": true
 }{noformat}

"
SPM-139456,DT037090,The error object defined in the Swagger specification is incorrect,CEF,Application Development Environment,,,"*Issue Description:*

The error object definition in the Swagger specification is incorrect and inconsistent with the actual error response returned by REST APIs.


There are two key problems:

# The error object definition contains an incorrectly named Error attribute instead of errors.
# The error object definition is missing field and stack_trace attributes, which may not always contain values but should be included for consistency and accuracy.


*User Interface Impact:* No
*Steps to Reproduce:*


To reproduce the issue you need to invoke a REST API.


*Using Swagger UI or a REST client (e.g., Postman):*

# Log in as a caseworker.
# Open a new browser tab. The authentication cookies from logging in will be reused by the REST client or Swagger UI tool.
# Invoke a REST API and pass an invalid parameter to force an error (e.g., /Rest/v1/persons/12345xxx).

*Using a command-line tool (e.g., cURL):*

# Programmatically call the /Res/j_security_check URL.
# Retrieve the LTPA token from the response cookie header.
# Add the LTPA token to the cookie request header for all API calls.
# Call an existing REST API with an invalid parameter (e.g., /Rest/v1/persons/12345xxx).
Issue: The API response contains an errors attribute, along with field and stack_trace attributes (if curam.trace is set to trace_on), however, the Swagger specification defines the error object as having an Error attribute instead of errors and does not include field or stack_trace.
{noformat}{
    """"errors"""": [
        {
            """"code"""": 404,
            """"field"""": null,
            """"message"""": """"HTTP 404 Not Found"""",
            """"level"""": """"error"""",
            """"message_id"""": null,
""""stackTrace"""": null
}
]
}{noformat}


*Resolution:* 

The Swagger specification has been updated to:

# Rename the incorrectly named Error attribute to errors.
# Add definitions for the field and stack_trace (will now always appear but will not have a value unless curam.trace is set to trace_on) attributes, with descriptions indicating that these fields may not always contain values.
"
SPM-137537,"DT037101 ",Internal error codes returned from the Rest Infrastructure are not documented,CEF,Application Development Environment,,,"*Issue Description:*
The 'Code' attribute of the failure response message body is used for both standard HTTP response codes and internal Curam error codes.
Consumer applications normally expect HTTP response codes and do not know how to handle internal error codes.

*User Interface Impact:* No

*Steps to Reproduce:*

Make a Rest invocation using an incorrectly formatted date.
E.g: Send the following message with an incorrectly formatted 'endDate' 
  {
  """"specialCautionType"""": { """"tableName"""" : """"SpecialCautionType"""", """"value"""" : """"SCSC12"""", """"description"""" : """"Escape Threat"""", """"parentCodeTable"""" : """"SpecialCautionCategory"""" },
  """"specialCautionCategory"""": { """"tableName"""" : """"SpecialCautionCategory"""", """"value"""" : """"SCC03"""", """"description"""" : """"Behavioral Alert"""" },
  """"special_caution_id"""": """"100"""",
  """"versionNo"""": 0,
  """"startDate"""": """"2021-03-18"""",
  """"endDate""""  : """"202-03-20"""",
  """"Comments"""" : """"test comments"""",
  """"concern_role_id"""": """"101""""
  }
  to the Rest path, E.g:  [https://10.0.0.229:10101/Rest/v1/persons/101/special_cautions|https://10.0.0.229:10101/Rest/v1/persons/101/special_cautions]

*Issue:* The resulting error message will contain internal code -150212 to indicate that 'endDate' could not be decoded:
  {
  """"code"""" : -150212,
  """"field"""" : """"endDate"""",
  """"message"""" : """"There was an issue while parsing a 'endDate' attribute, which contains a value of '202-03-20': This is not in the supported ISO-8601 date format, e.g. yyyy-MM-dd."""",
  """"level"""" : """"error""""
  }

*Resolution:*

All negative values for the 'code' fields can be interpreted as ?HTTP 400 The data request is invalid?.?If needed, the full set of internal code values and their associated message can be obtained from the following property files:

* EJBServer/components/Rest/rest/properties/RestErrorMessages.properties
* CuramCDEJ/doc/defaultproperties/curam/omega3/i18n/RuntimeMessages.properties

"
